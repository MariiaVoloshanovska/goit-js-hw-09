{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAQ6C,SAApCC,EAAYC,EAAUC,GAC7B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAGUC,YAArC,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAjBGQ,SAASC,cAAc,SAG/BC,iBAAiB,UAkBU,SAAVC,GAEYA,EAA/BC,iBAE4C,MAAxCZ,MAAAa,EAAKC,KAAEA,EAAIC,OAAEA,GAAWJ,EAAIK,cAAcC,SAGN,IAAvC,IAAIC,EAAI,EAAGA,EAAIH,EAAOI,MAAOD,IAAK,CACrC,MAAME,EAAWF,EAAI,EACfG,EAAWC,OAAOT,EAAMM,OAASL,EAAKK,MAAQD,EAEApB,EAAxCsB,EAAUC,GACnBE,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,MAEjBwB,EAAA5B,GAAS6B,OAAOC,QACd,uBAAqB3B,QAAiBC,MAAU,IAGnD2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAElBwB,EAAA5B,GAAS6B,OAAOG,QACd,sBAAoB7B,QAAiBC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst ourForm = document.querySelector('.form');\n\n// Додавання події `submit` до форми і прив'язка функції `onSubmit` як обробника події\nourForm.addEventListener('submit', turnOnOurSubmit);\n\n// Функція, яка створює проміс з випадковими значеннями\nfunction newPromises(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    // Встановлення таймеру, який викликається після затримки\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n// Функція, яка виконується при подачі форми\nfunction turnOnOurSubmit(evt) {\n  // Запобігання перезавантаження сторінки\n  evt.preventDefault();\n  // Отримання значень полів форми за допомогою властивості `elements`\n  const { delay, step, amount } = evt.currentTarget.elements;\n\n  // Цикл, який генерує проміси в залежності від значення `amount`\n  for (let i = 0; i < amount.value; i++) {\n    const position = i + 1;\n    const delayAll = Number(delay.value) + step.value * i;\n    // Виклик функції `createPromise` для створення промісу з позицією та затримкою\n    newPromises(position, delayAll)\n      .then(({ position, delay }) => {\n        // Якщо проміс виконується, виводиться повідомлення про успіх\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        // Якщо проміс не виконується - помилкa\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\n\n// const pageForm = document.querySelector('.form'); // Вибірка форми з класом `.form`\n// const onBtnclick = (event) => { // Функція-обробник події `click` на кнопці форми\n//   event.preventDefault(); // Запобігання перезавантаженню сторінки\n//   let delay = Number(event.currentTarget.delay.value); // Отримання значення поля `delay` та перетворення його в число\n//   const step = Number(event.currentTarget.step.value); // Отримання значення поля `step` та перетворення його в число\n//   const amount = Number(event.currentTarget.amount.value); // Отримання значення поля `amount` та перетворення його в число\n//   let position = 0; // Ініціалізація змінної `position` зі значенням 0\n\n//   for (let i = 1; i <= amount; i += 1) { // Цикл, який генерує проміси залежно від значення `amount`\n//     position = i; // Оновлення значення `position` з поточним значенням ітерації циклу\n//     createPromise(position, delay) // Виклик функції `createPromise` зі значеннями `position` та `delay`\n//       .then(({ position, delay }) => { // Обробка випадку, коли проміс виконується (резолвиться)\n//         Notiflix.Notify.success(`:white_tick: Fulfilled promise ${position} in ${delay}ms`); // Виведення повідомлення про успіх за допомогою `Notiflix.Notify.success()`\n//       })\n//       .catch(({ position, delay }) => { // Обробка випадку, коли проміс не виконується (відхиляється)\n//         Notiflix.Notify.failure(`:x: Rejected promise ${position} in ${delay}ms`); // Виведення повідомлення про помилку за допомогою `Notiflix.Notify.failure()`\n//       });\n\n//     delay += step; // Оновлення значення `delay`, додаючи до нього значення `step`\n//   }\n// }\n\n// pageForm.addEventListener('submit', onBtnclick); // Додавання обробника події `submit` до форми\n\n// function createPromise(position, delay) { // Визначення функції `createPromise`, яка створює новий проміс зі змінними `position` та `delay`\n//   return new Promise((resolve, reject) => { // Створення нового промісу\n//     const shouldResolve = Math.random() > 0.3; // Генерація випадкового значення для визначення, чи проміс повинен бути виконаний чи відхилений\n//     setTimeout(() => { // Встановлення таймеру\n//       if (shouldResolve) {\n//         resolve({ position, delay }); // Виклик `resolve` для виконання промісу\n//       } else {\n//         reject({ position, delay }); // Виклик `reject` для відхилення промісу\n//       }\n//     }, delay);\n//   });\n// }\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$newPromises","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","evt","preventDefault","delay1","step","amount","currentTarget","elements","i","value","position1","delayAll","Number","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.53d4bd55.js.map"}